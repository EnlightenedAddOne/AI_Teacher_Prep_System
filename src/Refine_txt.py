import json
from llm_integration import LLMFactory
from src.configs import config
from src.utils.prompts import text_polishing_prompt

'''
演讲稿优化
'''


base_txt=['尊敬的各位听众，大家好！今天，我们将一同深入探索互联网通信的基石——TCP协议。作为数据传输的核心机制，TCP协议承载着网络应用的稳定性与可靠性。本演讲旨在全面解析TCP协议的原理、特性以及其在现代通信中的应用，带领大家领略这一技术背后的精妙设计。让我们开始这段精彩的探索之旅吧。', '在这次的演讲中，我会通过以下几点为大家介绍整体内容：TCP 协议概述、其与 OSI 模型的关系，接着剖析三次握手与四次挥手及核心机制，探讨实际应用与常见问题，最后进行总结与对比。', '这部分我将探讨TCP协议概述，重点介绍TCP的基本概念。TCP是传输控制协议，确保数据完整可靠到达，通过三次握手建立连接，四次挥手断开连接。', '下面我将介绍TCP的基本概念，它作为互联网协议套件中的核心协议，承担着确保数据包在传输过程中完整与可靠的重任。那么这一页我们探讨的是TCP与OSI模型的对应关系。TCP位于OSI模型的传输层，为上层应用提供端到端的通信服务，这是保证数据有序且无差错传输的关键所在。最后要讲的是TCP连接的建立和终止机制，即三次握手与四次挥手。这两个过程是实现通信双方同步的重要步骤，通过它们，TCP连接得以顺利地建立和优雅地关闭。', '这部分我将以为主题展开，深入剖析其对应层次关系，探讨二者在网络架构中的重要地位及相互作用。', '这部分我将以 TCP 与 OSI 模型的层次对应为切入点来展开介绍。在 OSI 模型中，TCP 协议对应的是传输层，其主要承担端到端的通信以及数据流控制这一关键任务，旨在保障数据包能从源端精准无误地抵达目标端，确保数据传输的准确性与完整性。紧接着来看三次握手过程。它是 TCP 连接建立的核心环节，通过客户端和服务器之间的三次报文交互，达成双方都已准备就绪且能够进行数据传输的状态，极大地增强了连接的可靠性，为后续数据传输奠定坚实基础。最后聚焦于 TCP 核心机制的作用。其包含分段、流量控制、拥塞控制以及错误控制等多方面机制，这些机制相互协作、紧密配合，旨在实现数据的可靠传输并维持网络的稳定性，使 TCP 在复杂多变的网络环境中依然能够高效运作。', '这部分，我们将深入探讨三次握手与四次挥手的核心概念。首先解析建立连接过程中，如何通过三次握手确保通信双方的可靠性；随后讲解断开连接过程，即四次挥手机制，确保数据传输的完整性及资源的正确释放。', '这部分我将以“建立连接过程”为核心，详细阐述TCP三次握手机制及其关键要素。首先，探讨TCP连接建立的基础——三次握手过程。此环节确保通信双方均处于就绪状态，能够顺利进行数据交换。通过SYN、SYN-ACK及ACK报文的交互，双方完成连接准备，为后续数据传输奠定坚实基础。紧接着，我们关注初始序列号同步的重要性。在三次握手中，双方交换初始序列号，这一步骤对后续数据传输的顺序排列和确认至关重要，保证了信息传输的准确性和可靠性。最后，分析连接状态转换的意义。一旦三次握手成功完成，TCP连接即从CLOSED状态跃迁至ESTABLISHED状态。这一转变标志着双向数据传输通道的正式开启，实现了稳定、可靠的通信链路，为信息的高效传递提供了有力保障。', '这部分我将以“断开连接过程”为核心，深入解析其关键环节。首先介绍的是四次挥手机制。它是TCP协议中终止通信连接的标准流程，旨在确保双方数据传输的完整性和可靠性。通过发送与确认四个报文，连接被优雅地关闭，体现了设计者的精妙构思。接下来讨论资源释放与通知的重要性。在四次挥手过程中，不仅关注数据的传输结束，更注重网络资源的合理分配与释放，以及对远端主机的有效告知，这是保障网络环境高效运行的必要条件。最后强调防止数据丢失的设计目标。整个四次挥手的过程，都是为了确保通信双方能完整地进行数据交换，从根本上避免了因连接意外中断带来的数据遗失问题，凸显了其在网络安全中的重要作用。', '这部分我将深入探讨网络通信中的核心机制，包括分段处理、流量控制、拥塞控制以及错误控制。这些机制共同确保了数据传输的高效性与可靠性。', '这部分我将以TCP协议的分段传输原理为核心，阐述其核心概念与运作流程。那么这一页，我们聚焦于分段处理流程。在发送数据前，TCP依据网络状况对数据进行精细分段，每个分段都被赋予序号和校验信息，确保接收端能够有序重组，从而保障数据传输的完整性。接下来，我们将深入分析分段机制带来的优势。分段策略允许TCP在面对网络拥塞或错误时，仅针对受损分段进行重传，而非整个数据包，这一机制显著提升了传输效率和网络资源的利用率。', '', '这段我将以"拥塞控制"为核心，阐述其在网络传输中的关键作用。首先，要强调的是拥塞控制作为TCP协议的核心机制之一，其重要性不容忽视。它通过智能调节数据传输速率，有效防止网络过载，确保信息流动的稳定性与高效性，是维护网络安全畅通的基石。接下来，探讨拥塞控制的实现方式，TCP采取了包括慢启动、拥塞避免及快速重传等一系列复杂而精妙的算法。这些算法能动态调整TCP窗口大小，根据实时网络状况灵活适应，最大化资源利用效率，展现了TCP协议在复杂网络环境下的自我调节能力。然而，面对网络环境中的不确定性因素，拥塞控制同样面临着快速响应网络变化、最小化数据包损失等挑战。持续地优化拥塞控制算法，成为提升网络性能、应对未来挑战的关键所在。这要求我们不断探索与创新，以适应日益复杂的网络应用场景，保障数据的可靠传输。', '这部分我将以TCP协议中错误控制机制为核心进行阐述。首先，通过校验和实现的检测机制保障了数据传输过程中的完整性，任何数据损坏均可被接收端识别并触发重传请求。接着，自动重传请求机制无需用户干预即可纠正传输错误，确保数据准确送达。最后，采用累积确认与选择性确认的双重策略有效提升了网络通信的可靠性与效率，为稳定、高效的数据传输提供了有力支持。', '这部分我将聚焦于，通过应用场景举例，深入探讨其实际运用，同时对常见故障进行详尽分析，旨在提供解决方案，以增强应用效能。', '这部分我将以应用场景举例，来展现TCP协议在网络通信中的关键作用。首先是网络通信优化，TCP通过三次握手建立、四次挥手断开连接，保障数据传输稳定可靠。接着是数据流管理，其利用分段、流量与拥塞控制有效避免数据丢失及拥堵，提升传输效率。最后是错误检测与恢复，内置机制可检测错误并重传或恢复数据，确保数据完整。', '这部分我将聚焦于TCP连接中的几个常见故障。首先，我们来看TCP连接中断，这是因网络不稳定或设备故障引发的，会直接打破数据传输流程，影响应用连贯性及用户体感。接下来是数据包丢失问题，多由网络拥塞或硬件障碍导致，这不仅破坏信息传输的完整性，还需依赖重传机制来恢复。最后探讨高延迟问题，它常由远距离传输、低效路由选择或服务器高负载引起，对实时应用的性能尤为致命。这些故障点是我们分析和优化通信效率的关键所在。', '这部分，我们将对TCP协议的特点进行全面的总结，并将其与其他通信协议进行对比。通过深入分析，我们旨在揭示TCP的独特优势以及在特定场景下相较于其他协议的局限性。', '这部分将总结TCP的特点。首先，其可靠性通过三次握手、分段及流量和错误控制机制实现。其次，采用滑动窗口协议，依接收方能力调整发送速率控制流量。最后，面对拥塞通过减小拥塞窗口大小降速，以保障稳定性与可靠性。', '这部分将以对比的视角，聚焦几种重要协议与TCP的关联及差异。首先探讨TCP与UDP在传输特性上的本质区别；接着剖析HTTP协议对TCP的依赖，揭示二者紧密协作的内在逻辑；随后比较FTP使用TCP时的优势，凸显其在选择传输层协议时的考量因素。通过对这些关键协议与TCP关系的深度解析，助您更清晰地把握不同协议在网络通信中的角色与功能定位。', '尊敬的各位听众，我们共同深入探讨了TCP协议的核心概念、机制及其在网络通信中的实际应用。希望今天的分享能加深您对TCP协议的理解与认识。谢谢大家的聆听！']


def text_polishing(api_key):
    llm = LLMFactory.initialize_tongyi(api_key)
    prompt = text_polishing_prompt.format(original_text=base_txt)
    
    # 获取原始响应并清洗格式
    raw_response = llm.invoke(prompt)
    cleaned_response = raw_response.replace('```json\n', '').replace('\n```', '')
    
    # return cleaned_response
    try:
        # 直接解析enhanced字段
        data = json.loads(cleaned_response)
        # 返回纯列表格式
        # return [p for p in data["enhanced"] if p]  # 直接返回Python列表
        return data["enhanced"]
    except Exception as e:
        print(f"格式处理错误: {e}")
        return []  # 返回空列表保证数据结构一致性

api_key = config['api_keys'].get('tongyi_api_key')

print(text_polishing(api_key))
